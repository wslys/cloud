// Code generated by protoc-gen-go.
// source: beaconCloud/rpcServer/user-srv/proto/loginCache/loginCache.proto
// DO NOT EDIT!

/*
Package loginCache is a generated protocol buffer package.

It is generated from these files:
	beaconCloud/rpcServer/user-srv/proto/loginCache/loginCache.proto

It has these top-level messages:
	Token
	Login
	Login2
	LoginCache
	ReadCacheRequest
	ReadCacheResponse
	AddCacheRequest
	AddCacheResponse
	UpdateCacheRequest
	UpdateCacheResponse
	DeleteCacheRequest
	DeleteCacheResponse
	GetLoginRequest
	GetLoginResponse
	AddLoginRequest
	AddLoginResponse
	ActivateLoginRequest
	ActivateLoginResponse
	DeleteLoginRequest
	DeleteLoginResponse
	ClearRequest
	ClearResponse
*/
package loginCache

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Token struct {
	Token   string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Created int64  `protobuf:"varint,2,opt,name=created" json:"created,omitempty"`
	Updated int64  `protobuf:"varint,3,opt,name=updated" json:"updated,omitempty"`
	Expires int64  `protobuf:"varint,4,opt,name=expires" json:"expires,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Login struct {
	UserId       string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	NodeId       string `protobuf:"bytes,2,opt,name=nodeId" json:"nodeId,omitempty"`
	Username     string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Email        string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Created      int64  `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Validity     int64  `protobuf:"varint,6,opt,name=Validity" json:"Validity,omitempty"`
	ValidityTime int64  `protobuf:"varint,7,opt,name=ValidityTime" json:"ValidityTime,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (m *Login) String() string            { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Login2 struct {
	Account      string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	NodeGrpId    int32  `protobuf:"varint,3,opt,name=nodeGrpId" json:"nodeGrpId,omitempty"`
	Token        string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	ClientId     string `protobuf:"bytes,5,opt,name=clientId" json:"clientId,omitempty"`
	VerifyPwd    string `protobuf:"bytes,6,opt,name=verifyPwd" json:"verifyPwd,omitempty"`
	Created      int64  `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	ActivateWait int64  `protobuf:"varint,8,opt,name=activateWait" json:"activateWait,omitempty"`
	ActivateTime int64  `protobuf:"varint,9,opt,name=activateTime" json:"activateTime,omitempty"`
	Validity     int64  `protobuf:"varint,10,opt,name=Validity" json:"Validity,omitempty"`
	ValidityTime int64  `protobuf:"varint,11,opt,name=ValidityTime" json:"ValidityTime,omitempty"`
	DeviceId     string `protobuf:"bytes,12,opt,name=deviceId" json:"deviceId,omitempty"`
}

func (m *Login2) Reset()                    { *m = Login2{} }
func (m *Login2) String() string            { return proto.CompactTextString(m) }
func (*Login2) ProtoMessage()               {}
func (*Login2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LoginCache struct {
	CacheCategory string `protobuf:"bytes,1,opt,name=cacheCategory" json:"cacheCategory,omitempty"`
	DataOwner     string `protobuf:"bytes,2,opt,name=dataOwner" json:"dataOwner,omitempty"`
	CachePath     string `protobuf:"bytes,3,opt,name=cachePath" json:"cachePath,omitempty"`
	CacheKey      string `protobuf:"bytes,4,opt,name=CacheKey" json:"CacheKey,omitempty"`
	CacheValue    string `protobuf:"bytes,5,opt,name=CacheValue" json:"CacheValue,omitempty"`
	Version       int32  `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	Created       int64  `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	ActivateTime  int64  `protobuf:"varint,8,opt,name=activateTime" json:"activateTime,omitempty"`
	Validity      int64  `protobuf:"varint,9,opt,name=Validity" json:"Validity,omitempty"`
	ValidityTime  int64  `protobuf:"varint,10,opt,name=ValidityTime" json:"ValidityTime,omitempty"`
}

func (m *LoginCache) Reset()                    { *m = LoginCache{} }
func (m *LoginCache) String() string            { return proto.CompactTextString(m) }
func (*LoginCache) ProtoMessage()               {}
func (*LoginCache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ReadCacheRequest struct {
	Cache *LoginCache `protobuf:"bytes,1,opt,name=cache" json:"cache,omitempty"`
}

func (m *ReadCacheRequest) Reset()                    { *m = ReadCacheRequest{} }
func (m *ReadCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadCacheRequest) ProtoMessage()               {}
func (*ReadCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadCacheRequest) GetCache() *LoginCache {
	if m != nil {
		return m.Cache
	}
	return nil
}

type ReadCacheResponse struct {
}

func (m *ReadCacheResponse) Reset()                    { *m = ReadCacheResponse{} }
func (m *ReadCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadCacheResponse) ProtoMessage()               {}
func (*ReadCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type AddCacheRequest struct {
	Cache *LoginCache `protobuf:"bytes,1,opt,name=cache" json:"cache,omitempty"`
}

func (m *AddCacheRequest) Reset()                    { *m = AddCacheRequest{} }
func (m *AddCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*AddCacheRequest) ProtoMessage()               {}
func (*AddCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddCacheRequest) GetCache() *LoginCache {
	if m != nil {
		return m.Cache
	}
	return nil
}

type AddCacheResponse struct {
}

func (m *AddCacheResponse) Reset()                    { *m = AddCacheResponse{} }
func (m *AddCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*AddCacheResponse) ProtoMessage()               {}
func (*AddCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UpdateCacheRequest struct {
	Cache *LoginCache `protobuf:"bytes,1,opt,name=cache" json:"cache,omitempty"`
}

func (m *UpdateCacheRequest) Reset()                    { *m = UpdateCacheRequest{} }
func (m *UpdateCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCacheRequest) ProtoMessage()               {}
func (*UpdateCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateCacheRequest) GetCache() *LoginCache {
	if m != nil {
		return m.Cache
	}
	return nil
}

type UpdateCacheResponse struct {
}

func (m *UpdateCacheResponse) Reset()                    { *m = UpdateCacheResponse{} }
func (m *UpdateCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateCacheResponse) ProtoMessage()               {}
func (*UpdateCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DeleteCacheRequest struct {
	Cache *LoginCache `protobuf:"bytes,1,opt,name=cache" json:"cache,omitempty"`
}

func (m *DeleteCacheRequest) Reset()                    { *m = DeleteCacheRequest{} }
func (m *DeleteCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCacheRequest) ProtoMessage()               {}
func (*DeleteCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteCacheRequest) GetCache() *LoginCache {
	if m != nil {
		return m.Cache
	}
	return nil
}

type DeleteCacheResponse struct {
}

func (m *DeleteCacheResponse) Reset()                    { *m = DeleteCacheResponse{} }
func (m *DeleteCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCacheResponse) ProtoMessage()               {}
func (*DeleteCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetLoginRequest struct {
	Login *Login `protobuf:"bytes,1,opt,name=login" json:"login,omitempty"`
}

func (m *GetLoginRequest) Reset()                    { *m = GetLoginRequest{} }
func (m *GetLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLoginRequest) ProtoMessage()               {}
func (*GetLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetLoginRequest) GetLogin() *Login {
	if m != nil {
		return m.Login
	}
	return nil
}

type GetLoginResponse struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Login *Login `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
}

func (m *GetLoginResponse) Reset()                    { *m = GetLoginResponse{} }
func (m *GetLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLoginResponse) ProtoMessage()               {}
func (*GetLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetLoginResponse) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *GetLoginResponse) GetLogin() *Login {
	if m != nil {
		return m.Login
	}
	return nil
}

type AddLoginRequest struct {
	Login *Login `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
}

func (m *AddLoginRequest) Reset()                    { *m = AddLoginRequest{} }
func (m *AddLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*AddLoginRequest) ProtoMessage()               {}
func (*AddLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddLoginRequest) GetLogin() *Login {
	if m != nil {
		return m.Login
	}
	return nil
}

type AddLoginResponse struct {
}

func (m *AddLoginResponse) Reset()                    { *m = AddLoginResponse{} }
func (m *AddLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*AddLoginResponse) ProtoMessage()               {}
func (*AddLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type ActivateLoginRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Login *Login `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
}

func (m *ActivateLoginRequest) Reset()                    { *m = ActivateLoginRequest{} }
func (m *ActivateLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateLoginRequest) ProtoMessage()               {}
func (*ActivateLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ActivateLoginRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *ActivateLoginRequest) GetLogin() *Login {
	if m != nil {
		return m.Login
	}
	return nil
}

type ActivateLoginResponse struct {
}

func (m *ActivateLoginResponse) Reset()                    { *m = ActivateLoginResponse{} }
func (m *ActivateLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateLoginResponse) ProtoMessage()               {}
func (*ActivateLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type DeleteLoginRequest struct {
	Token *Token `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Login *Login `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
}

func (m *DeleteLoginRequest) Reset()                    { *m = DeleteLoginRequest{} }
func (m *DeleteLoginRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteLoginRequest) ProtoMessage()               {}
func (*DeleteLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteLoginRequest) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *DeleteLoginRequest) GetLogin() *Login {
	if m != nil {
		return m.Login
	}
	return nil
}

type DeleteLoginResponse struct {
}

func (m *DeleteLoginResponse) Reset()                    { *m = DeleteLoginResponse{} }
func (m *DeleteLoginResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteLoginResponse) ProtoMessage()               {}
func (*DeleteLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ClearRequest struct {
}

func (m *ClearRequest) Reset()                    { *m = ClearRequest{} }
func (m *ClearRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearRequest) ProtoMessage()               {}
func (*ClearRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type ClearResponse struct {
}

func (m *ClearResponse) Reset()                    { *m = ClearResponse{} }
func (m *ClearResponse) String() string            { return proto.CompactTextString(m) }
func (*ClearResponse) ProtoMessage()               {}
func (*ClearResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func init() {
	proto.RegisterType((*Token)(nil), "Token")
	proto.RegisterType((*Login)(nil), "Login")
	proto.RegisterType((*Login2)(nil), "Login2")
	proto.RegisterType((*LoginCache)(nil), "LoginCache")
	proto.RegisterType((*ReadCacheRequest)(nil), "ReadCacheRequest")
	proto.RegisterType((*ReadCacheResponse)(nil), "ReadCacheResponse")
	proto.RegisterType((*AddCacheRequest)(nil), "AddCacheRequest")
	proto.RegisterType((*AddCacheResponse)(nil), "AddCacheResponse")
	proto.RegisterType((*UpdateCacheRequest)(nil), "UpdateCacheRequest")
	proto.RegisterType((*UpdateCacheResponse)(nil), "UpdateCacheResponse")
	proto.RegisterType((*DeleteCacheRequest)(nil), "DeleteCacheRequest")
	proto.RegisterType((*DeleteCacheResponse)(nil), "DeleteCacheResponse")
	proto.RegisterType((*GetLoginRequest)(nil), "GetLoginRequest")
	proto.RegisterType((*GetLoginResponse)(nil), "GetLoginResponse")
	proto.RegisterType((*AddLoginRequest)(nil), "AddLoginRequest")
	proto.RegisterType((*AddLoginResponse)(nil), "AddLoginResponse")
	proto.RegisterType((*ActivateLoginRequest)(nil), "ActivateLoginRequest")
	proto.RegisterType((*ActivateLoginResponse)(nil), "ActivateLoginResponse")
	proto.RegisterType((*DeleteLoginRequest)(nil), "DeleteLoginRequest")
	proto.RegisterType((*DeleteLoginResponse)(nil), "DeleteLoginResponse")
	proto.RegisterType((*ClearRequest)(nil), "ClearRequest")
	proto.RegisterType((*ClearResponse)(nil), "ClearResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StorageCacheInf service

type StorageCacheInfClient interface {
	ReadCache(ctx context.Context, in *ReadCacheRequest, opts ...client.CallOption) (*ReadCacheResponse, error)
	AddCache(ctx context.Context, in *AddCacheRequest, opts ...client.CallOption) (*AddCacheResponse, error)
	UpdateCache(ctx context.Context, in *UpdateCacheRequest, opts ...client.CallOption) (*UpdateCacheResponse, error)
	DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...client.CallOption) (*DeleteCacheResponse, error)
}

type storageCacheInfClient struct {
	c           client.Client
	serviceName string
}

func NewStorageCacheInfClient(serviceName string, c client.Client) StorageCacheInfClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "storagecacheinf"
	}
	return &storageCacheInfClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *storageCacheInfClient) ReadCache(ctx context.Context, in *ReadCacheRequest, opts ...client.CallOption) (*ReadCacheResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StorageCacheInf.ReadCache", in)
	out := new(ReadCacheResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageCacheInfClient) AddCache(ctx context.Context, in *AddCacheRequest, opts ...client.CallOption) (*AddCacheResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StorageCacheInf.AddCache", in)
	out := new(AddCacheResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageCacheInfClient) UpdateCache(ctx context.Context, in *UpdateCacheRequest, opts ...client.CallOption) (*UpdateCacheResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StorageCacheInf.UpdateCache", in)
	out := new(UpdateCacheResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageCacheInfClient) DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...client.CallOption) (*DeleteCacheResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StorageCacheInf.DeleteCache", in)
	out := new(DeleteCacheResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StorageCacheInf service

type StorageCacheInfHandler interface {
	ReadCache(context.Context, *ReadCacheRequest, *ReadCacheResponse) error
	AddCache(context.Context, *AddCacheRequest, *AddCacheResponse) error
	UpdateCache(context.Context, *UpdateCacheRequest, *UpdateCacheResponse) error
	DeleteCache(context.Context, *DeleteCacheRequest, *DeleteCacheResponse) error
}

func RegisterStorageCacheInfHandler(s server.Server, hdlr StorageCacheInfHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&StorageCacheInf{hdlr}, opts...))
}

type StorageCacheInf struct {
	StorageCacheInfHandler
}

func (h *StorageCacheInf) ReadCache(ctx context.Context, in *ReadCacheRequest, out *ReadCacheResponse) error {
	return h.StorageCacheInfHandler.ReadCache(ctx, in, out)
}

func (h *StorageCacheInf) AddCache(ctx context.Context, in *AddCacheRequest, out *AddCacheResponse) error {
	return h.StorageCacheInfHandler.AddCache(ctx, in, out)
}

func (h *StorageCacheInf) UpdateCache(ctx context.Context, in *UpdateCacheRequest, out *UpdateCacheResponse) error {
	return h.StorageCacheInfHandler.UpdateCache(ctx, in, out)
}

func (h *StorageCacheInf) DeleteCache(ctx context.Context, in *DeleteCacheRequest, out *DeleteCacheResponse) error {
	return h.StorageCacheInfHandler.DeleteCache(ctx, in, out)
}

// Client API for LoginCacheInf service

type LoginCacheInfClient interface {
	GetLogin(ctx context.Context, in *GetLoginRequest, opts ...client.CallOption) (*GetLoginResponse, error)
	AddLogin(ctx context.Context, in *AddLoginRequest, opts ...client.CallOption) (*AddLoginResponse, error)
	ActivateLogin(ctx context.Context, in *ActivateLoginRequest, opts ...client.CallOption) (*ActivateLoginResponse, error)
	DeleteLogin(ctx context.Context, in *DeleteLoginRequest, opts ...client.CallOption) (*DeleteLoginResponse, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...client.CallOption) (*ClearResponse, error)
}

type loginCacheInfClient struct {
	c           client.Client
	serviceName string
}

func NewLoginCacheInfClient(serviceName string, c client.Client) LoginCacheInfClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "logincacheinf"
	}
	return &loginCacheInfClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *loginCacheInfClient) GetLogin(ctx context.Context, in *GetLoginRequest, opts ...client.CallOption) (*GetLoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LoginCacheInf.GetLogin", in)
	out := new(GetLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginCacheInfClient) AddLogin(ctx context.Context, in *AddLoginRequest, opts ...client.CallOption) (*AddLoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LoginCacheInf.AddLogin", in)
	out := new(AddLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginCacheInfClient) ActivateLogin(ctx context.Context, in *ActivateLoginRequest, opts ...client.CallOption) (*ActivateLoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LoginCacheInf.ActivateLogin", in)
	out := new(ActivateLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginCacheInfClient) DeleteLogin(ctx context.Context, in *DeleteLoginRequest, opts ...client.CallOption) (*DeleteLoginResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LoginCacheInf.DeleteLogin", in)
	out := new(DeleteLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginCacheInfClient) Clear(ctx context.Context, in *ClearRequest, opts ...client.CallOption) (*ClearResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LoginCacheInf.Clear", in)
	out := new(ClearResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginCacheInf service

type LoginCacheInfHandler interface {
	GetLogin(context.Context, *GetLoginRequest, *GetLoginResponse) error
	AddLogin(context.Context, *AddLoginRequest, *AddLoginResponse) error
	ActivateLogin(context.Context, *ActivateLoginRequest, *ActivateLoginResponse) error
	DeleteLogin(context.Context, *DeleteLoginRequest, *DeleteLoginResponse) error
	Clear(context.Context, *ClearRequest, *ClearResponse) error
}

func RegisterLoginCacheInfHandler(s server.Server, hdlr LoginCacheInfHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&LoginCacheInf{hdlr}, opts...))
}

type LoginCacheInf struct {
	LoginCacheInfHandler
}

func (h *LoginCacheInf) GetLogin(ctx context.Context, in *GetLoginRequest, out *GetLoginResponse) error {
	return h.LoginCacheInfHandler.GetLogin(ctx, in, out)
}

func (h *LoginCacheInf) AddLogin(ctx context.Context, in *AddLoginRequest, out *AddLoginResponse) error {
	return h.LoginCacheInfHandler.AddLogin(ctx, in, out)
}

func (h *LoginCacheInf) ActivateLogin(ctx context.Context, in *ActivateLoginRequest, out *ActivateLoginResponse) error {
	return h.LoginCacheInfHandler.ActivateLogin(ctx, in, out)
}

func (h *LoginCacheInf) DeleteLogin(ctx context.Context, in *DeleteLoginRequest, out *DeleteLoginResponse) error {
	return h.LoginCacheInfHandler.DeleteLogin(ctx, in, out)
}

func (h *LoginCacheInf) Clear(ctx context.Context, in *ClearRequest, out *ClearResponse) error {
	return h.LoginCacheInfHandler.Clear(ctx, in, out)
}

func init() {
	proto.RegisterFile("beaconCloud/rpcServer/user-srv/proto/loginCache/loginCache.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0x4e, 0x02, 0x0e, 0xf1, 0x24, 0x21, 0xc9, 0x26, 0x70, 0x22, 0x0b, 0x1d, 0x71, 0xac, 0x73,
	0xc1, 0xcd, 0xd9, 0x88, 0x1c, 0xaa, 0x4a, 0xbd, 0x02, 0xa5, 0x12, 0x8a, 0x8a, 0x5a, 0x64, 0x28,
	0xbd, 0x5e, 0xec, 0x01, 0x2c, 0x8c, 0x9d, 0x3a, 0x4e, 0x68, 0x1e, 0xa6, 0x2f, 0xd3, 0xbe, 0x4b,
	0x1f, 0xa0, 0x4f, 0x50, 0xed, 0x8f, 0x7f, 0x63, 0x89, 0x82, 0x7a, 0xb7, 0x33, 0xb3, 0xf3, 0xf3,
	0x7d, 0xf3, 0x79, 0x65, 0x38, 0xbe, 0x46, 0x66, 0x07, 0xfe, 0xc4, 0x0b, 0x16, 0xce, 0x28, 0x9c,
	0xd9, 0x17, 0x18, 0x2e, 0x31, 0x1c, 0x2d, 0xe6, 0x18, 0xfe, 0x37, 0x0f, 0x97, 0xa3, 0x59, 0x18,
	0x44, 0xc1, 0xc8, 0x0b, 0x6e, 0x5d, 0x7f, 0xc2, 0xec, 0x3b, 0xcc, 0x1c, 0xa9, 0x88, 0x99, 0xf7,
	0xa0, 0x5d, 0x06, 0xf7, 0xe8, 0x93, 0x01, 0x68, 0x11, 0x3f, 0x0c, 0xab, 0xfb, 0xd5, 0x03, 0xdd,
	0x92, 0x06, 0x19, 0xc2, 0x96, 0x1d, 0x22, 0x8b, 0xd0, 0x19, 0xd6, 0xf6, 0xab, 0x07, 0x1b, 0x56,
	0x6c, 0xf2, 0xc8, 0x62, 0xe6, 0x88, 0xc8, 0x86, 0x8c, 0x28, 0x93, 0x47, 0xf0, 0xcb, 0xcc, 0x0d,
	0x71, 0x3e, 0xdc, 0x94, 0x11, 0x65, 0x9a, 0xdf, 0xab, 0xa0, 0x9d, 0xf1, 0x09, 0xc8, 0x2e, 0xd4,
	0xf9, 0x90, 0x53, 0x47, 0xb5, 0x53, 0x16, 0xf7, 0xfb, 0x81, 0x83, 0x53, 0xd9, 0x4e, 0xb7, 0x94,
	0x45, 0x0c, 0x68, 0xf0, 0x1b, 0x3e, 0x7b, 0x40, 0xd1, 0x4e, 0xb7, 0x12, 0x9b, 0x4f, 0x8e, 0x0f,
	0xcc, 0xf5, 0x44, 0x37, 0xdd, 0x92, 0x46, 0x76, 0x72, 0x2d, 0x3f, 0xb9, 0x01, 0x8d, 0x2b, 0xe6,
	0xb9, 0x8e, 0x1b, 0xad, 0x86, 0x75, 0x11, 0x4a, 0x6c, 0x62, 0x42, 0x2b, 0x3e, 0x5f, 0xba, 0x0f,
	0x38, 0xdc, 0x12, 0xf1, 0x9c, 0xcf, 0xfc, 0x51, 0x83, 0xba, 0x40, 0x31, 0xe6, 0x4d, 0x98, 0x6d,
	0x07, 0x0b, 0x3f, 0x52, 0x38, 0x62, 0x33, 0x03, 0xb0, 0x96, 0x03, 0xb8, 0x07, 0x3a, 0x87, 0x74,
	0x1a, 0xce, 0xa6, 0x92, 0x38, 0xcd, 0x4a, 0x1d, 0xe9, 0x12, 0x36, 0xb3, 0x4b, 0x30, 0xa0, 0x61,
	0x7b, 0x2e, 0xfa, 0xd1, 0x54, 0x62, 0xd1, 0xad, 0xc4, 0xe6, 0xf5, 0x96, 0x18, 0xba, 0x37, 0xab,
	0xf3, 0x47, 0x47, 0xa0, 0xd1, 0xad, 0xd4, 0x91, 0x25, 0x61, 0x2b, 0x4f, 0x82, 0x09, 0x2d, 0x66,
	0x47, 0xee, 0x92, 0x45, 0xf8, 0x89, 0xb9, 0xd1, 0xb0, 0x21, 0x81, 0x66, 0x7d, 0xd9, 0x3b, 0x82,
	0x0c, 0x3d, 0x7f, 0x87, 0xfb, 0x72, 0x64, 0xc2, 0x13, 0x64, 0x36, 0xd7, 0xc9, 0xe4, 0xf9, 0x0e,
	0x2e, 0x5d, 0x9b, 0xaf, 0xbc, 0x25, 0xb1, 0xc5, 0xb6, 0xf9, 0xad, 0x06, 0x70, 0x96, 0x08, 0x96,
	0xfc, 0x0b, 0x6d, 0x9b, 0x1f, 0x26, 0x2c, 0xc2, 0xdb, 0x20, 0x5c, 0x29, 0xca, 0xf3, 0x4e, 0x4e,
	0x88, 0xc3, 0x22, 0xf6, 0xe1, 0xd1, 0xc7, 0x50, 0x71, 0x9f, 0x3a, 0x78, 0x54, 0x5c, 0x3f, 0x67,
	0xd1, 0x9d, 0x12, 0x52, 0xea, 0xe0, 0xc3, 0x88, 0x56, 0xef, 0x70, 0xa5, 0x36, 0x90, 0xd8, 0xe4,
	0x6f, 0x00, 0x71, 0xbe, 0x62, 0xde, 0x02, 0xd5, 0x1a, 0x32, 0x1e, 0x4e, 0xf5, 0x12, 0xc3, 0xb9,
	0x1b, 0xf8, 0x62, 0x0d, 0x9a, 0x15, 0x9b, 0xbf, 0xb7, 0x04, 0x41, 0x50, 0xe3, 0x09, 0x82, 0xf5,
	0x27, 0x08, 0x86, 0x12, 0xb5, 0xbe, 0x82, 0xae, 0x85, 0xcc, 0x11, 0x93, 0x5a, 0xf8, 0x79, 0x81,
	0xf3, 0x88, 0xfc, 0x03, 0x9a, 0x00, 0x2d, 0x18, 0x6c, 0x8e, 0x9b, 0x34, 0x65, 0xd9, 0x92, 0x11,
	0xb3, 0x0f, 0xbd, 0x4c, 0xda, 0x7c, 0x16, 0xf8, 0x73, 0x34, 0x8f, 0xa0, 0x73, 0xe2, 0x3c, 0xbb,
	0x14, 0x81, 0x6e, 0x9a, 0xa5, 0x2a, 0xbd, 0x06, 0xf2, 0x51, 0x3c, 0x17, 0xcf, 0x2d, 0xb6, 0x03,
	0xfd, 0x5c, 0x62, 0x5a, 0xef, 0x2d, 0x7a, 0xf8, 0xa2, 0x7a, 0xb9, 0x44, 0x55, 0x6f, 0x04, 0x9d,
	0x53, 0x8c, 0xc4, 0xf5, 0xb8, 0xd8, 0x1e, 0x68, 0xe2, 0xf5, 0x54, 0xc5, 0xea, 0xb2, 0x98, 0x25,
	0x9d, 0xe6, 0x7b, 0xe8, 0xa6, 0x09, 0xb2, 0x08, 0xcf, 0x48, 0x9f, 0x54, 0x9e, 0x21, 0x5e, 0xda,
	0xf8, 0xab, 0x4e, 0xea, 0xd5, 0xca, 0xea, 0x8d, 0x04, 0xd5, 0xe5, 0x03, 0x94, 0x26, 0x48, 0x96,
	0x73, 0x03, 0x98, 0x16, 0x0c, 0x4e, 0x94, 0x96, 0x8a, 0x95, 0x5e, 0x3c, 0xd8, 0x5f, 0xb0, 0x53,
	0xa8, 0xa9, 0x9a, 0x9d, 0xc7, 0x2b, 0xf8, 0x63, 0xad, 0x92, 0xdd, 0xe4, 0x1b, 0x6d, 0x43, 0x6b,
	0xe2, 0x21, 0x0b, 0x55, 0x0b, 0xb3, 0x03, 0x6d, 0x65, 0xcb, 0x0b, 0xe3, 0x9f, 0x55, 0xe8, 0x5c,
	0x44, 0x41, 0xc8, 0x6e, 0xe5, 0x56, 0xa7, 0xfe, 0x0d, 0x39, 0x02, 0x3d, 0xd1, 0x33, 0xe9, 0xd1,
	0xe2, 0x27, 0x61, 0x10, 0xba, 0x2e, 0xf7, 0x0a, 0x39, 0x84, 0x46, 0x2c, 0x5d, 0xd2, 0xa5, 0x05,
	0xed, 0x1b, 0x3d, 0xba, 0xa6, 0xeb, 0x0a, 0x79, 0x03, 0xcd, 0x8c, 0x40, 0x49, 0x9f, 0xae, 0xeb,
	0xdc, 0x18, 0xd0, 0x32, 0x0d, 0x8b, 0xdc, 0x8c, 0x18, 0x49, 0x9f, 0xae, 0x6b, 0xda, 0x18, 0xd0,
	0x32, 0xbd, 0x56, 0xc6, 0x5f, 0x6b, 0xd0, 0x4e, 0xe5, 0xcd, 0x21, 0x1f, 0x42, 0x23, 0x96, 0x24,
	0xe9, 0xd2, 0x82, 0x9c, 0x8d, 0x1e, 0x2d, 0xea, 0x35, 0xc1, 0x1b, 0xa7, 0x14, 0x04, 0x28, 0xf1,
	0x16, 0x53, 0x8e, 0xa1, 0x9d, 0xd3, 0x03, 0xd9, 0xa1, 0x65, 0x9a, 0x33, 0x76, 0x69, 0xb9, 0x6c,
	0x32, 0xa8, 0x65, 0x7e, 0x8c, 0x3a, 0x97, 0x3d, 0xa0, 0x65, 0x4a, 0xa8, 0x90, 0x03, 0xd0, 0xc4,
	0xee, 0x49, 0x9b, 0x66, 0x35, 0x61, 0x6c, 0xd3, 0x9c, 0x24, 0xcc, 0xca, 0x75, 0x5d, 0xfc, 0xef,
	0xfc, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x07, 0x61, 0xfa, 0x33, 0x09, 0x00, 0x00,
}
